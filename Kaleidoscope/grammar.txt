numberexpr ::= number

parenexpr ::= '(' expression ')'

identifierexpr
    ::= identifier
    ::= identifier '(' expression* ')'

primary
    ::= identifierexpr
    ::= numberexpr
    ::= parenexpr

expression ::= primary binoprhs

binoprhs ::= ('+' primary)*

prototype ::= id '(' id* ')'

definition ::= 'def' prototype expression

external ::= 'extern' prototype

toplevelexpr ::= expression

top ::= definition | external | expression | ';'

